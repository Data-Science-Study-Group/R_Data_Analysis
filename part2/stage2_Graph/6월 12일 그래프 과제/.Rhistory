axis.title.y = element_text(color="brown",size=12,face="bold"))
ggplot(reorder_diamonds,aes(x=color,y=average,color=cut,group=cut)) +
geom_line() + geom_point(size=3,shape=1) +
xlab("cut") + ylab("mean of price") +
ggtitle("Line graph of price (By cut and color)") +
theme(plot.title = element_text(color="orange",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="black",size=12,face="bold"),
axis.title.y = element_text(color="brown",size=12,face="bold"))
reorder_diamonds <- diamonds %>%
group_by(cut,color) %>%
summarise(average=mean(price,na.rm=T))
reorder_diamonds
ggplot(reorder_diamonds,aes(x=color,y=average,color=cut,group=cut,fill=cut)) +
geom_line() + geom_point(size=average,shape=1) +
xlab("color") + ylab("mean of price") +
ggtitle("Line graph of price (By cut and color)") +
theme(plot.title = element_text(color="orange",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="black",size=12,face="bold"),
axis.title.y = element_text(color="brown",size=12,face="bold"))
str(reorder_diamonds)
ggplot(reorder_diamonds,aes(x=color,y=average,color=cut,group=cut,fill=cut)) +
geom_line() + geom_point(size=average,shape=1) +
xlab("color") + ylab("mean of price") +
ggtitle("Line graph of price (By cut and color)") +
theme(plot.title = element_text(color="orange",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="black",size=12,face="bold"),
axis.title.y = element_text(color="brown",size=12,face="bold"))
ggplot(reorder_diamonds,aes(x=color,y=average,color=cut,group=cut,fill=cut)) +
geom_line() + geom_point(size=3,shape=1) +
xlab("color") + ylab("mean of price") +
ggtitle("Line graph of price (By cut and color)") +
theme(plot.title = element_text(color="orange",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="black",size=12,face="bold"),
axis.title.y = element_text(color="brown",size=12,face="bold"))
ggplot(reorder_diamonds,aes(x=color,y=average,color=cut,group=cut,fill=cut)) +
geom_line(aes(linetype=cut)) + geom_point(aes(size=average),shape=22) +
xlab("color") + ylab("mean of price") +
ggtitle("Line graph of price (By cut and color)") +
theme(plot.title = element_text(color="orange",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="black",size=12,face="bold"),
axis.title.y = element_text(color="brown",size=12,face="bold"))
ggplot(reorder_diamonds,aes(x=color,y=average,color=cut,group=cut,fill=cut)) +
geom_line(aes(linetype=cut)) + geom_point(aes(size=average)) +
xlab("color") + ylab("mean of price") +
ggtitle("Line graph of price (By cut and color)") +
theme(plot.title = element_text(color="orange",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="black",size=12,face="bold"),
axis.title.y = element_text(color="brown",size=12,face="bold"))
mpg %>%
filter(class=="suv") %>%
group_by(manufacturer) %>%
summarise(average=mean(cty,na.rm=T)) %>%
arrange(desc(average)) %>%
head(5)
mpg
select_mpg <- mpg %>%
group_by(manufacturer) %>%
filter(manufacturer %in% c('subaru','toyota','nissan','jeep','mercury')) %>%
summarise(average=mean(cty,na.rm=T)) %>%
arrange(desc(average))
select_mpg
select_mpg <- mpg %>%
group_by(manufacturer) %>%
filter(class=="suv") %>%
filter(manufacturer %in% c('subaru','toyota','nissan','jeep','mercury')) %>%
summarise(average=mean(cty,na.rm=T)) %>%
arrange(desc(average))
select_mpg
ggplot(select_mpg,aes(x=reorder(manufacturer,-average),y=average,fill=manufacturer)) +
geom_bar(stat="identity") +
xlab("manufacturer") + ylab("mean of cty") +
ggtitle("Barplot (High cty in suv)") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="black",size=12,face="bold"),
axis.title.y = element_text(color="black",size=12,face="bold"))
setwd("D:/Workplace/R_Data_Analysis/part2/stage1_Wordcloud/6월 11일 NLP 분석 과제")
library(rJava)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(stringr)
useSejongDic()
seoul01 <- readLines("data/응답소_2015_01.txt")
seoul02 <- readLines("data/응답소_2015_02.txt")
seoul03 <- readLines("data/응답소_2015_03.txt")
seoul04 <- readLines("data/응답소_2015_04.txt")
seoul05 <- readLines("data/응답소_2015_05.txt")
seoul06 <- readLines("data/응답소_2015_06.txt")
seoul07 <- readLines("data/응답소_2015_07.txt")
seoul08 <- readLines("data/응답소_2015_08.txt")
seoul09 <- readLines("data/응답소_2015_09.txt")
seoul10 <- readLines("data/응답소_2015_10.txt")
seoul11 <- readLines("data/응답소_2015_11.txt")
seoul12 <- readLines("data/응답소_2015_12.txt")
seoul01 <- sapply(seoul01,extractNoun,USE.NAMES=F)
seoul01 <- unlist(seoul01)
seoul02 <- sapply(seoul02,extractNoun,USE.NAMES=F)
seoul02 <- unlist(seoul02)
seoul03 <- sapply(seoul03,extractNoun,USE.NAMES=F)
seoul03 <- unlist(seoul03)
seoul04 <- sapply(seoul04,extractNoun,USE.NAMES=F)
seoul04 <- unlist(seoul04)
seoul05 <- sapply(seoul05,extractNoun,USE.NAMES=F)
seoul05 <- unlist(seoul05)
seoul06 <- sapply(seoul06,extractNoun,USE.NAMES=F)
seoul06 <- unlist(seoul06)
seoul07 <- sapply(seoul07,extractNoun,USE.NAMES=F)
seoul07 <- unlist(seoul07)
seoul08 <- sapply(seoul08,extractNoun,USE.NAMES=F)
seoul08 <- unlist(seoul08)
seoul09 <- sapply(seoul09,extractNoun,USE.NAMES=F)
seoul09 <- unlist(seoul09)
seoul10 <- sapply(seoul10,extractNoun,USE.NAMES=F)
seoul10 <- unlist(seoul10)
seoul11 <- sapply(seoul11,extractNoun,USE.NAMES=F)
seoul11 <- unlist(seoul11)
seoul12 <- sapply(seoul12,extractNoun,USE.NAMES=F)
seoul12 <- unlist(seoul12)
seoul_2015 <- c(seoul01,seoul02,seoul03,seoul04,seoul05,seoul06,
seoul07,seoul08,seoul09,seoul10,seoul11,seoul12)
length(seoul_2015)
head(seoul_2015,30)
seoul_2015 <- str_replace_all(seoul_2015,"[^[:alpha:]]","") # 한글, 영어 이외는 제거
seoul_2015 <- str_replace_all(seoul_2015,"[A-z]","") # 모든 영문자 제거
seoul_2015 <- str_replace_all(seoul_2015,"\\s","") # 공백 제거
seoul_2015 <- str_replace_all(seoul_2015,"\\d","") # 숫자 제거
seoul_2015 <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=3}, seoul_2015)
length(seoul_2015)
txt <- readLines("data/seoul_gsub.txt")
for (i in 1:length(txt)) {
seoul_2015 <- gsub((txt[i]),"",seoul_2015)
}
write(unlist(seoul_2015),"data/seoul_2015_1.txt")
seoul_2015 <- read.table("data/seoul_2015_1.txt")
nrow(seoul_2015)
wordcount <- table(seoul_2015)
head(sort(wordcount,decreasing=T),30)
palete <- brewer.pal(9,"Set3")
par(oma=rep(0.5,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(5,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcount
wordcount>=100
wordcount <- wordcount[wordcount>=100]
wordcount
palete <- brewer.pal(9,"Set3")
par(oma=rep(0.5,4))
length(wordcount)
wordcloud(names(wordcount),freq=wordcount,scale=c(5,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
legend(0.2,0.8,"2015년 서울시 응답소 요청사항 분석",cex=0.8,fill=NA,border=NA,bg="white",
text.col="blue",text.font=2,box.col="blue")
View(seoul_2015)
?wordcloud
wordcount <- table(seoul_2015)
wordcloud(names(wordcount),freq=wordcount,scale=c(4,0.5),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcount <- wordcount[wordcount > 1] # 빈도수가 1인 명사 제외
wordcloud(names(wordcount),freq=wordcount,scale=c(4,0.5),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(4,0.5),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
legend(0.2,0.9,"2015년 서울시 응답소 요청사항 분석",cex=0.8,fill=NA,border=NA,bg="yellow",
text.col="blue",text.font=2,box.col="red")
setwd("D:/Workplace/R_Data_Analysis/part2/stage1_Wordcloud/Wordcloud/Ex06_스티브잡스")
install.packages("wordcloud")
library(wordcloud)
install.packages("tm")
library(tm)
(data1 <- readLines("tm_test1.txt"))
class(data1)
(corp1 <- Corpus(VectorSource(data1)))
inspect(corp1)
(tdm <- TermDocumentMatrix(corp1))
(m <- as.matrix(tdm))
corp2 <- tm_map(corp1,stripWhitespace)
corp2 <- tm_map(corp2,tolower)
corp2 <- tm_map(corp2,removeNumbers)
corp2 <- tm_map(corp2,removePunctuation)
corp2 <- tm_map(corp2,PlainTextDocument)
sword2 <- c(stopwords('en'),"and","but","not")
corp2 <- tm_map(corp2,removeWords,sword2)
stopwords('en')
corp2
(tdm2 <- TermDocumentMatrix(corp2))
(m2 <- as.matrix(tdm2))
(data1 <- readLines("tm_test1.txt"))
class(data1)
(corp1 <- Corpus(VectorSource(data1)))
inspect(corp1)
(tdm <- TermDocumentMatrix(corp1))
(m <- as.matrix(tdm))
corp2 <- tm_map(corp1,stripWhitespace) # 여러개 공백 -> 하나의 공백
corp2 <- tm_map(corp2,tolower) # 대문자 -> 소문자
corp2 <- tm_map(corp2,removeNumbers) # 숫자 제거
corp2 <- tm_map(corp2,removePunctuation) # 문자 제거
# corp2 <- tm_map(corp2,PlainTextDocument)
sword2 <- c(stopwords('en'),"and","but","not") # 불용어 추가
corp2 <- tm_map(corp2,removeWords,sword2) #불용어 제거
(tdm2 <- TermDocumentMatrix(corp2))
(m2 <- as.matrix(tdm2))
class(m2)
colnames(m2) <- 1:4
freq1 <- sort(rowSums(m2),decreasing=T)
head(freq1,20)
freq2 <- sort(colSums(m2),decreasing=T)
head(freq2,20)
findFreqTerms(tdm2,2)
findAssocs(tdm2,"apple",0.5)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
freq1
palete <- brewer.pal(7,"Set3")
wordcloud(names(freq1),freq=freq1,scale=c(5,1),min.freq=1,
colors=palete,random.order=F,random.color=T)
library(RColorBrewer)
?wordcloud
setwd("D:/Workplace/R_Data_Analysis/part2/stage1_Wordcloud/Wordcloud/Ex06_스티브잡스")
install.packages("wordcloud")
library(wordcloud)
install.packages("tm")
library(tm)
install.packages("RColorBrewer")
library(RColorBrewer)
install.packages("RColorBrewer")
library(wordcloud)
library(tm)
library(RColorBrewer)
(data1 <- readLines("tm_test1.txt"))
class(data1)
(corp1 <- Corpus(VectorSource(data1)))
inspect(corp1)
(tdm <- TermDocumentMatrix(corp1))
(m <- as.matrix(tdm))
corp2 <- tm_map(corp1,stripWhitespace) # 여러개 공백 -> 하나의 공백
corp2 <- tm_map(corp2,tolower) # 대문자 -> 소문자
corp2 <- tm_map(corp2,removeNumbers) # 숫자 제거
corp2 <- tm_map(corp2,removePunctuation) # 문자 제거
# corp2 <- tm_map(corp2,PlainTextDocument)
sword2 <- c(stopwords('en'),"and","but","not") # 불용어 추가
corp2 <- tm_map(corp2,removeWords,sword2) #불용어 제거
stopwords('en')
(tdm2 <- TermDocumentMatrix(corp2))
(m2 <- as.matrix(tdm2))
class(m2)
colnames(m2) <- 1:4
freq1 <- sort(rowSums(m2),decreasing=T)
head(freq1,20)
freq2 <- sort(colSums(m2),decreasing=T)
head(freq2,20)
findFreqTerms(tdm2,2)
findAssocs(tdm2,"apple",0.5)
palete <- brewer.pal(7,"Set3")
wordcloud(names(freq1),freq=freq1,scale=c(5,1),min.freq=1,
colors=palete,random.order=F,random.color=T)
legend(0.2,0.8,"tm package test #2",cex=0.8,fill=NA,border=NA,bg="white",
text.col="blue",text.font=2,box.col="blue")
wordcloud(names(freq1),freq=freq1,scale=c(5,1),min.freq=1,
colors=palete,random.order=F,random.color=T)
legend(0.3,1,"tm package test #2",cex=0.8,fill=NA,border=NA,bg="white",
text.col="blue",text.font=2,box.col="blue")
wordcloud(names(freq1),freq=freq1,scale=c(5,1),min.freq=1,
colors=palete,random.order=F,random.color=T)
legend(0.3,0.9,"tm package test #2",cex=0.8,fill=NA,border=NA,bg="white",
text.col="blue",text.font=2,box.col="blue")
wordcloud(names(freq1),freq=freq1,scale=c(5,1),min.freq=1,
colors=palete,random.order=F,random.color=T)
legend(0.3,0.85,"tm package test #2",cex=0.8,fill=NA,border=NA,bg="white",
text.col="blue",text.font=2,box.col="blue")
barplot(freq1,main="tm package test #2",las=2,ylim=c(0,5))
# Steve Jobs
(data1 <- readLines("steve.txt"))
class(data1)
(corp1 <- Corpus(VectorSource(data1)))
inspect(corp1)
(tdm <- TermDocumentMatrix(corp1))
(m <- as.matrix(tdm))
corp2 <- tm_map(corp1,stripWhitespace) # 여러개 공백 -> 하나의 공백
corp2 <- tm_map(corp2,tolower) # 대문자 -> 소문자
corp2 <- tm_map(corp2,removeNumbers) # 숫자 제거
corp2 <- tm_map(corp2,removePunctuation) # 문자 제거
# corp2 <- tm_map(corp2,PlainTextDocument)
sword2 <- c(stopwords('en'),"and","but","not") # 불용어 추가
corp2 <- tm_map(corp2,removeWords,sword2) #불용어 제거
(tdm2 <- TermDocumentMatrix(corp2))
(m2 <- as.matrix(tdm2))
class(m2)
ncol(m2)
colnames(m2) <- 1:59
freq1 <- sort(rowSums(m2),decreasing=T)
head(freq1,20)
freq2 <- sort(colSums(m2),decreasing=T)
head(freq2,20)
findFreqTerms(tdm2,2)
findFreqTerms(tdm2,10)
findAssocs(tdm2,"apple",0.5)
palete <- brewer.pal(7,"Set3")
wordcloud(names(freq1),freq=freq1,scale=c(5,1),min.freq=1,
colors=palete,random.order=F,random.color=T)
legend(0.3,0.85,"Speech of Steve Jobs",cex=0.8,fill=NA,border=NA,bg="white",
text.col="red",text.font=2,box.col="blue")
setwd("D:/Workplace/R_Data_Analysis/part2/stage1_Wordcloud/Wordcloud/Ex07_특정키워드")
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
alert <- readLines("oracle_alert_testdb.log")
library(tm)
error_1 <- gsub(" ","_",alert)
head(alert,10)
error_1 <- gsub(" ","_",alert)
head(unlist(error_1),20)
error_2 <- unlist(error_1)
head(error_2,10)
error_2 <- Filter(function(x) {nchar(x)>=5}, error_2)
head(unlist(error_3),20)
error_3 <- grep("^ORA-+",error_2,value=T)
head(unlist(error_3),20)
write(unlist(error_3),"alert_testdb2.log")
rev <- read.table("alert_testdb2.log")
errorcount <- table(rev)
head(sort(errorcount,decreasing=T),20)
palete <- brewer.pal(9,"Set1")
wordcloud(names(errorcount),freq=errorcount,scale=c(5,0.5),rot.per=0.25,min.freq=3,
colors=palete,random.order=F,random.color=T)
legend(0.3,0.85,"Oracle Alert Log File 분석 결과",cex=0.8,fill=NA,border=NA,bg="white",
text.col="red",text.font=2,box.col="blue")
display.brewer.all(n=10,exact.n=F)
setwd("D:/Workplace/R_Data_Analysis/part2/stage2_Graph/Ex01_제주도")
library(rJava)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(stringr)
useSejongDic()
mergeUserDic(data.frame(readLines("제주도여행지.txt")),"ncn") # 사전에 단어 추가
(txt <- readLines("jeju.txt"))
(place <- sapply(txt,extractNoun,USE.NAMES=F))
head(unlist(place),30)
cdata <- unlist(place)
place <- str_replace_all(cdata,"[^[:alpha:]]","") # 한글, 영어 외는 삭제
place <- gsub(" ","",place)
(txt <- readLines("제주도여행코스gsub.txt"))
(cnt_txt <- length(txt))
for (i in 1:cnt_txt) {
place <- gsub((txt[i]),"",place)
}
place
place <- Filter(function(x) {nchar(x)>=2}, place)
write(unlist(place),"jeju_2.txt")
rev <- read.table("jeju_2.txt")
nrow(rev)
wordcount <- table(rev)
head(sort(wordcount,decreasing=T),30)
(top10 <- head(sort(wordcount,decreasing=T),10))
pie(top10,main="제주도 추천 여행 코스 TOP 10")
pie(top10,main="제주도 추천 여행 코스 TOP 10",col=rainbow(10),radius=1)
(pct <- round(top10/sum(top10)*100,1))
lab <- paste(names(top10),"\n",pct,"%")
pie(top10,main="제주도 추천 여행 코스 TOP 10",col=rainbow(10),labels=lab,cex=0.8)
pie(top10,main="제주도 추천 여행 코스 TOP 10",col=Spectral(10),labels=lab,cex=0.8)
paint <- brewer.pal(10,"Spectral")
pie(top10,main="제주도 추천 여행 코스 TOP 10",col=paint,labels=lab,cex=0.8)
(bchart <- head(sort(wordcount,decreasing=T),10))
bp <- barplot(bchart,main="제주도 추천 여행 코스 TOP 10",col=rainbow(10),
cex.names=0.7,las=2,ylim=c(0,25))
pct <- round(bchart/sum(bchart)*100,1)
pct
text(x=bp,y=bchart*1.05,labels=paste("(",pct,"%",")"),col="black",cex=0.7)
text(x=bp,y=bchart*0.95,labels=paste(bchart,"건"),col="black",cex=0.7)
install.packages("ggplot2")
library(ggplot2)
str(top10)
(df_top10 <- as.data.frame(top10))
ggplot(top10,aes(x="",y=Freq,fill=rev)) +
facet_grid(facets=. ~ Origin) +
geom_bar(stat="identity", width=1) +
coord_polar(theta="y",start=0) +
ggtitle("제주도 추천 여행 코스 TOP 10")
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
facet_grid(facets=. ~ Origin) +
geom_bar(stat="identity", width=1) +
coord_polar(theta="y",start=0) +
ggtitle("제주도 추천 여행 코스 TOP 10")
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
coord_polar(theta="y",start=0) +
ggtitle("제주도 추천 여행 코스 TOP 10")
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1)
library(dplyr)
options(digits=2)
(df_top10 <- as.data.frame(top10))
df_top10$pct <- df_top10 %>%
mutate(pct=Freq/sum(Freq)*100)
df_top10
(df_top10 <- as.data.frame(top10))
df_top10 <- df_top10 %>%
mutate(pct=Freq/sum(Freq)*100)
df_top10
(df_top10 <- df_top10 %>%
mutate(pct=Freq/sum(Freq)*100) %>%
mutate(ylabel=paste(sprintf("%4.1f",pct),'%',sep='')))
(df_top10 <- df_top10 %>%
mutate(pct=Freq/sum(Freq)*100) %>%
mutate(ylabel=paste(sprintf("%4.1f",pct),'%',sep='')) %>%
mutate(ypos=cumsum(pct)-0.5*pct)
)
(df_top10 <- df_top10 %>%
mutate(pct=Freq/sum(Freq)*100) %>%
mutate(ylabel=paste(sprintf("%4.1f",pct),'%',sep='')) %>%
arrange(desc(rev)) %>%
mutate(ypos=cumsum(pct)-0.5*pct)
)
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
coord_polar(theta="y",start=0) +
geom_text(aes(y=ylabel,label=ylabel),color="black") +
ggtitle("제주도 추천 여행 코스 TOP 10")
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ylabel,label=ylabel),color="black") +
coord_polar(theta="y",start=0) +
ggtitle("제주도 추천 여행 코스 TOP 10")
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ylabel,label=ylabel),color="black")
str(df_top10)
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1)
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ypos,label=ylabel),color="black")
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ypos,label=ylabel),color="black") +
coord_polar(theta="y",start=0) +
ggtitle("제주도 추천 여행 코스 TOP 10")
(df_top10 <- as.data.frame(top10))
(df_top10 <- df_top10 %>%
mutate(pct=Freq/sum(Freq)*100) %>%
mutate(ylabel=paste(sprintf("%s\n%4.1f",rev,pct),'%',sep='')) %>%
arrange(desc(rev)) %>%
mutate(ypos=cumsum(pct)-0.5*pct)
)
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ypos,label=ylabel),color="black") +
coord_polar(theta="y",start=0) +
ggtitle("제주도 추천 여행 코스 TOP 10")
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ypos,label=ylabel),color="black") +
coord_polar(theta="y",start=0) +
ggtitle("제주도 추천 여행 코스 TOP 10") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="black",size=12,face="bold"),
axis.title.y = element_text(color="black",size=12,face="bold"))
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ypos,label=ylabel),color="black") +
coord_polar(theta="y",start=0) +
xlab("") + ylab("") +
ggtitle("제주도 추천 여행 코스 TOP 10") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="black",size=12,face="bold"),
axis.title.y = element_text(color="black",size=12,face="bold"))
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ypos,label=ylabel),color="black") +
coord_polar(theta="y",start=0) +
xlab("") + ylab("") +
ggtitle("제주도 추천 여행 코스 TOP 10") +
theme(plot.title = element_text(color="brown",size=16,face="bold.italic",hjust=0.5))
?sprintf
install.packages("extrafont")
library(extrafont)
library(extrafont)
library(extrafont)
library(extrafont)
install.packages("extrafont")
library(extrafont)
windowsFonts()
windowsFonts(malgun="맑은 고딕")
theme_update(text=element_text(family="malgun"))
windowsFonts()
ggplot(df_top10,aes(x="",y=Freq,fill=rev)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ypos,label=ylabel),color="black") +
coord_polar(theta="y",start=0) +
xlab("") + ylab("") +
ggtitle("제주도 추천 여행 코스 TOP 10") +
theme(plot.title=element_text(color="brown",size=16,face="bold",hjust=0.5))
barplot(bchart,main="제주도 추천 여행 코스 TOP 10",col=rainbow(10),
cex.names=0.7,las=1,ylim=c(0,25),horiz=T)
text(y=bp,x=bchart*1.15,labels=paste("(",pct,"%",")"),col="black",cex=0.7)
text(y=bp,x=bchart*0.9,labels=paste(bchart,"건"),col="black",cex=0.7)
barplot(bchart,main="제주도 추천 여행 코스 TOP 10",col=rainbow(10),
cex.names=0.7,las=1,xlim=c(0,25),horiz=T)
text(y=bp,x=bchart*0.9,labels=paste(bchart,"건"),col="black",cex=0.7)
text(y=bp,x=bchart*1.15,labels=paste("(",pct,"%",")"),col="black",cex=0.7)
install.packages("plotrix")
library(plotrix)
bchart
th_pct <- round(bchart/sum(bchart)*100,1)
th_names <- names(bchart)
th_labels <- paste(th_names,"\n","(",th_pct,")")
pie3D(bchart,main="제주도 추천 여행 코스 TOP 10",col=rainbow(10),
cex=0.3,labels=th_labels,explode=0.05)
setwd("D:/Workplace/R_Data_Analysis/part2/stage2_Graph/6월 12일 그래프 과제")
hiphop <- readLines("hiphop.txt")
